name: Build, check and tests
'on':
  workflow_dispatch:
  #push:
    #branches:
      #- dev
jobs:
  Check-code-quality-style:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Checkstyle for Java
        uses: dbelyaev/action-checkstyle@v1.21.1
        with:
          checkstyle_version: 10.26.1
          workdir: src/main/java
          level: warning
          checkstyle_config: google_checks.xml
  Check-if-code-contains-sensitive-infos:
    needs: Check-code-quality-style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: check rules
        run: ls -lrth .github/gitleaks-rules
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2.3.9
        env:
          GITLEAKS_CONFIG: .github/gitleaks-rules
          GITLEAKS_ENABLE_SUMMARY: true
      - name: Générer le badge Gitleaks
        if: always()
        run: |
          mkdir -p .badges
          if [ "${{ job.status }}" == "success" ]; then
            echo '{"schemaVersion":1,"label":"Gitleaks","message":"passed","color":"brightgreen"}' > .badges/gitleaks-badge.json
          else
            echo '{"schemaVersion":1,"label":"Gitleaks","message":"failed","color":"red"}' > .badges/gitleaks-badge.json
          fi
      - name: Upload Gitleaks badge
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-badge
          path: .badges/gitleaks-badge.json
  build-code-gradle:
    needs: Check-code-quality-style
    runs-on: ubuntu-latest
    env:
      DB_USERNAME: '${{ secrets.DB_USERNAME }}'
      DB_PASSWORD: '${{ secrets.DB_PASSWORD }}'
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8
      - name: Donner les droits d'exécution à Gradle
        run: chmod +x gradlew
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Build with Gradle
        run: ./gradlew clean assemble
      - name: Tests Jacoco
        run: ./gradlew test jacocoTestReport
      - name: Check if reports are present
        run: 'ls -lRth ${{ github.workspace }}/build/reports/'
      - name: Check generated report
        run: >-
          more ${{ github.workspace
          }}/build/reports/jacoco/test/jacocoTestReport.csv
      - name: Generate JaCoCo Badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2
        with:
          generate-branches-badge: true
          generate-coverage-badge: true
          jacoco-csv-file: build/reports/jacoco/test/jacocoTestReport.csv
          badges-directory: build/reports/jacoco/test/html/badges
      - name: Dependency Check
        uses: dependency-check/Dependency-Check_Action@1.1.0
        env:
          JAVA_HOME: /opt/jdk
        id: Depcheck
        with:
          project: test
          path: .
          format: HTML
          args: |
            --failOnCVSS 7
            --enableRetired
      - name: Check owasp report location
        run: 'ls -lRth ${{github.workspace}}/reports'
      - name: Check if the app is build and present
        run: |
          ls ${{ github.workspace }}/build/libs
      - name: Check the badges
        run: ls -lRth build/reports/jacoco/test/html/badges
      - name: Prepare directory for GitHub Pages
        run: |
          mkdir -p site/reports/jacoco
          mkdir -p site/reports/owasp
          cp -r build/reports/jacoco/test/html/* site/reports/jacoco/
          cp reports/dependency-check-report.html site/reports/owasp/
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build
      - name: Download Gitleaks badge
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: gitleaks-badge
          path: .badges
      - name: Copy the Gitleaks badge
        if: always()
        run: |
          mkdir -p site/badges
          cp .badges/gitleaks-badge.json site/badges/
      - name: Publish coverage report to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: site
  sonarqube-analysis:
    runs-on: ubuntu-latest
    needs: build-code-gradle
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build
      - name: Check classes directory
        run: |
          ls -lRth ${{ github.workspace }}/build/classes/*
      - name: Analyse SonarQube
        uses: SonarSource/sonarqube-scan-action@v5.2.0
        with:
          args: >
            -Dsonar.organization=audirline
            -Dsonar.projectKey=audirline_spring-music-sqldb
            -Dsonar.java.binaries=build/classes
            -Dsonar.sonar.java.libraries=build/libs
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml
        env:
          SONAR_TOKEN: '${{ secrets.SONAR_TOKEN }}'
  Push-to-artifactory:
    runs-on: ubuntu-latest
    needs: sonarqube-analysis
    steps:
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4.5.11
        with:
          version: latest
      - name: Configure JFrog CLI
        run: |
          jfrog config add artifactory-server \
            --url=$ARTIFACTORY_URL \
            --user=$ARTIFACTORY_USER \
            --password=$ARTIFACTORY_PASSWORD \
            --interactive=false
        env:
          ARTIFACTORY_URL: '${{ secrets.ARTIFACTORY_URL }}'
          ARTIFACTORY_USER: '${{ secrets.ARTIFACTORY_USER }}'
          ARTIFACTORY_PASSWORD: '${{ secrets.ARTIFACTORY_PASSWORD }}'
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build
      - name: Push JAR to Artifactory
        run: |
          jfrog rt upload \
            build/libs/*.jar \
            spring-music-dev/spring-thanh/${{ github.sha }}/ \
            --build-name=spring-music-sqldb \
            --build-number=${{ github.run_number }}
  Deploy-to-dev-environment-aPaas:
    runs-on: ubuntu-latest
    needs: Push-to-artifactory
    steps:
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: '1.8'
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4.5.11
        with:
          version: latest
      - name: Configure JFrog CLI
        run: |
          jfrog config add artifactory-server \
            --url=$ARTIFACTORY_URL \
            --user=$ARTIFACTORY_USER \
            --password=$ARTIFACTORY_PASSWORD \
            --interactive=false
        env:
          ARTIFACTORY_URL: '${{ secrets.ARTIFACTORY_URL }}'
          ARTIFACTORY_USER: '${{ secrets.ARTIFACTORY_USER }}'
          ARTIFACTORY_PASSWORD: '${{ secrets.ARTIFACTORY_PASSWORD }}'      
      - name: Download-snapshot-from-Artifactory
        run: |
          mkdir -p /tmp/from_artifactory
          jfrog rt s "spring-music-dev/spring-thanh/*.jar" --sort-by=created --sort-order=desc --limit=1 > latest.json
          LATEST_PATH=$(jq -r '.[0].repo + "/" + .[0].path + "/" + .[0].name' latest.json | sed 's:/$::')
          echo "Latest artifact path: $LATEST_PATH"
          jfrog rt dl "$LATEST_PATH" /tmp/from_artifactory/ --flat
      - name: check artifact
        run: ls -lrth /tmp/from_artifactory/
      - name: Deploy to Azure WebApp
        uses: azure/webapps-deploy@v3
        env:
          AZURE_WEBAPP_NAME: spring-music
          AZURE_WEBAPP_PACKAGE_PATH: '${{ github.workspace }}'
          JAVA_VERSION: '1.8'
          AZURE_WEBAPP_PUBLISH_PROFILE: '${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}'
        with:
          app-name: '${{ env.AZURE_WEBAPP_NAME }}'
          publish-profile: '${{ env.AZURE_WEBAPP_PUBLISH_PROFILE }}'
          package: '/tmp/from_artifactory/*.jar'     
  Tests-on-dev-environment:
    runs-on: ubuntu-latest
    needs: Deploy-to-dev-environment-aPaas
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies for Cypress
        run: |
          npm install cypress wait-on
          npm install --save-dev mochawesome mochawesome-merge cypress-mochawesome-reporter
      - name: Wait for app to be up
        run: npx wait-on https://spring-music-hgckhuf3gza0bvb2.canadacentral-01.azurewebsites.net/
      - name: Run Cypress tests on Chrome
        run: npx cypress run --browser chrome
      - name: Copy results after Chrome
        run: |
          mkdir -p artifacts/chrome
          cp -r cypress/screenshots artifacts/chrome/screenshots || true
          cp -r cypress/videos artifacts/chrome/videos || true
      - name: Run Cypress tests on Edge
        run: npx cypress run --browser edge
      - name: Copy results after Edge
        run: |
          mkdir -p artifacts/edge
          cp -r cypress/screenshots artifacts/edge/screenshots || true
          cp -r cypress/videos artifacts/edge/videos || true
      - name: Run Cypress tests on Firefox
        run: npx cypress run --browser firefox || echo "Skipping Firefox"
      - name: Copy results after Firefox
        run: |
          mkdir -p artifacts/firefox
          cp -r cypress/screenshots artifacts/firefox/screenshots || true
          cp -r cypress/videos artifacts/firefox/videos || true
      - name: Upload Cypress screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: artifacts/**/screenshots
      - name: Upload Cypress videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: artifacts/**/videos 
      - name: Sucess message
        run: >-
          echo "All the tests have passed!!! We can now promote the snapshot to a release"
          
  Promote-snapshot-to-release:
    runs-on: ubuntu-latest
    needs: Tests-on-dev-environment
    steps:
      - uses: actions/checkout@v4
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4.5.11
      - name: Configure JFrog CLI
        run: >
          jfrog config add artifactory-server --url=$ARTIFACTORY_URL
          --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASSWORD
          --interactive=false
        env:
          ARTIFACTORY_URL: '${{ secrets.ARTIFACTORY_URL }}'
          ARTIFACTORY_USER: '${{ secrets.ARTIFACTORY_USER }}'
          ARTIFACTORY_PASSWORD: '${{ secrets.ARTIFACTORY_PASSWORD }}'
      - name: Promote snapshot to release
        run: |
         jfrog rt copy \
         spring-music-dev/spring-thanh/${{ github.sha }}/* \
         spring-music-prod/spring-thanh/prod/
